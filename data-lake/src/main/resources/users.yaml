openapi: 3.0.1
info:
  title: Users API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get all available users
      operationId: getUsers
      parameters:
      - name: username
        in: query
        description: Filter by username
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a user
      operationId: addUser
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'  
  /users/{id}:
    get:
      summary: Get specific user
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: The ID of the user to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: The ID of the user to retrieve
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete specific user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The ID of the user to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/todos:
    get:
      summary: Get all available todos for this user
      operationId: getTodos
      parameters:
      - name: id
        in: path
        description: The ID of the user to retrieve todos
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation. The content is defined in the Todos API
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /users/{id}/posts:
    get:
      summary: Get all posts for this user
      operationId: getPosts
      parameters:
      - name: id
        in: path
        description: The ID of the user to retrieve posts
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation. The content is defined in the Posts API
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object                  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        website:
          type: string
        company:
          type: object
          properties:
            name:
              type: string
            catchPhrase:
              type: string
            bs:
              type: string
        address:
          type: object
          properties:
            street:
              type: string
            suite:
              type: string
            city:
              type: string
            zipcode:
              type: string
            geo:
              type: object
              properties:
                lat:
                  type: string
                lng:
                  type: string