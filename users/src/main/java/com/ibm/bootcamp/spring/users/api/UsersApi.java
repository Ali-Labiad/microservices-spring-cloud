/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ibm.bootcamp.spring.users.api;

import com.ibm.bootcamp.spring.users.exception.Error;
import com.ibm.bootcamp.spring.users.model.User;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.servers.Server;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@Validated
@Tag(name = "user", description = "Everything about your users")
@OpenAPIDefinition(servers = {@Server(url = "https://localhost:8443/", description = "Default Server URL")})
public interface UsersApi {

    /**
     * POST /users : Add a new user.
     * Add a new user.
     *
     * @param user Create a new user. (required)
     * @return The user has been created. (status code 201)
     * or Invalid request. (status code 400)
     * or Internal server error. (status code 500)
     * or Unexpected error (status code 200)
     */
    @Operation(
            operationId = "addUser",
            summary = "Add a new user.",
            description = "Add a new user.",
            tags = {"user"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "The user has been created.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid request."),
                    @ApiResponse(responseCode = "500", description = "Internal server error."),
                    @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/users",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Void> addUser(
            @Parameter(name = "User", description = "Create a new user.", required = true) @Valid @RequestBody User user
    );


    /**
     * DELETE /users/{id} : Delete user resource.
     *
     * @param id Id value that need to be considered for getting a user. (required)
     * @return User deleted (status code 200)
     * or Invalid id supplied (status code 400)
     * or User not found (status code 404)
     * or Internal server error. (status code 500)
     * or Unexpected error (status code 200)
     */
    @Operation(
            operationId = "deleteUser",
            summary = "Delete user resource.",
            description = "Delete user resource",
            tags = {"user"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "User deleted"),
                    @ApiResponse(responseCode = "400", description = "Invalid id supplied"),
                    @ApiResponse(responseCode = "404", description = "User not found"),
                    @ApiResponse(responseCode = "500", description = "Internal server error."),
                    @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/users/{id}",
            produces = {"application/json"}
    )
    ResponseEntity<Void> deleteUser(
            @Parameter(name = "id", description = "Id value that need to be considered for getting a user.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /users/{id} : Finds User by userId.
     * Returns a single user.
     *
     * @param id Id value that need to be considered for getting a user. (required)
     * @return successful operation (status code 200)
     * or Invalid request. (status code 400)
     * or user not found. (status code 401)
     * or Internal server error. (status code 500)
     * or Unexpected error (status code 200)
     */
    @Operation(
            operationId = "findUserById",
            summary = "Finds User by userId.",
            description = "Returns a single user.",
            tags = {"user"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid request."),
                    @ApiResponse(responseCode = "404", description = "user not found."),
                    @ApiResponse(responseCode = "500", description = "Internal server error."),
                    @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/users/{id}",
            produces = {"application/json"}
    )
    ResponseEntity<User> findUserById(
            @Parameter(name = "id", description = "Id value that need to be considered for getting a user.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /users : retrieve all users.
     * Return a list of users as an array.
     *
     * @return successful operation (status code 200)
     * or Internal server error. (status code 500)
     * or Unexpected error (status code 200)
     */
    @Operation(
            operationId = "getUsers",
            summary = "retrieve all users.",
            description = "Return a list of users as an array.",
            tags = {"user"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error."),
                    @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/users",
            produces = {"application/json"}
    )
    ResponseEntity<List<User>> getUsers();


    /**
     * PUT /users/{userId} : Update an existing user.
     * Update an existing user by Id.
     *
     * @param userId The id of user that need to be updated. (required)
     * @param user   Update an existent user in the store (required)
     * @return Successful operation (status code 200)
     * or Invalid request (status code 400)
     * or User not found (status code 404)
     * or Internal server error (status code 500)
     * or Unexpected error (status code 200)
     */
    @Operation(
            operationId = "updateUser",
            summary = "Update an existing user.",
            description = "Update an existing user by Id.",
            tags = {"user"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid request"),
                    @ApiResponse(responseCode = "404", description = "User not found"),
                    @ApiResponse(responseCode = "500", description = "Internal server error"),
                    @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{userId}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<User> updateUser(
            @Parameter(name = "userId", description = "The id of user that need to be updated.", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
            @Parameter(name = "User", description = "Update an existent user in the store", required = true) @Valid @RequestBody User user
    );

}
